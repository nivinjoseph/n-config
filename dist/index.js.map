{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,6BAA6B;AAC7B,iBAAe;AAGf,IAAI,MAAM,GAA2B,EAAE,CAAC;AACxC,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,aAAa,CAAC,CAAC;AAEzD,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAC5B,CAAC;IACG,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC/C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC5C,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAClC,CAAC;AAED,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACxB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CACpB,CAAC;IACG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EACpC,CAAC;QACG,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAEzB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACnB,QAAQ,CAAC;QAEb,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;YACnB,QAAQ,CAAC;QAEb,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAC1B,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAE5B,EAAE,CAAC,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,KAAK,CAAC,mBAAmB,EAAE,CAAC;YACzD,QAAQ,CAAC;QAEb,IAAI,OAAO,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAClC,EAAE,CAAC,CAAC,OAAO,KAAK,MAAM,IAAI,OAAO,KAAK,OAAO,CAAC,CAC9C,CAAC;YACG,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,KAAK,MAAM,CAAC;YACjC,QAAQ,CAAC;QACb,CAAC;QAED,IACA,CAAC;YACG,IAAI,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAC1B,CAAC;gBACG,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;gBACrB,QAAQ,CAAC;YACb,CAAC;QACL,CAAC;QACD,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,CAAC,CAAC,CAAC;QAEH,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IACzB,CAAC;AACL,CAAC;AAGD;IAEI,gBAAwB,CAAC;IAGlB,MAAM,CAAC,SAAS,CAAI,GAAW;QAElC,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QACxB,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,IAAI,IAAI,CAAC;YACrC,MAAM,CAAC,IAAI,CAAC;QAChB,MAAM,CAAC,KAAU,CAAC;IACtB,CAAC;CACJ;AAZD,oDAYC","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport \"n-ext\";\n\n\nlet config: {[index: string]: any} = {};\nconst filePath = path.join(process.cwd(), \"config.json\");\n\nif (fs.existsSync(filePath))\n{\n    const json = fs.readFileSync(filePath, \"utf8\");\n    if (json != null && !json.isEmptyOrWhiteSpace())\n        config = JSON.parse(json);\n}\n\nlet args = process.argv;\nif (args.length > 2)\n{\n    for (let i = 2; i < args.length; i++)\n    {\n        let arg = args[i].trim();\n        \n        if (!arg.contains(\"=\"))\n            continue;\n        \n        let parts = arg.split(\"=\");\n        if (parts.length !== 2)\n            continue;\n        \n        let key = parts[0].trim();\n        let value = parts[1].trim();\n        \n        if (key.isEmptyOrWhiteSpace() || value.isEmptyOrWhiteSpace())\n            continue;\n        \n        let boolVal = value.toLowerCase();\n        if (boolVal === \"true\" || boolVal === \"false\")\n        {\n            config[key] = boolVal === \"true\";\n            continue;\n        }   \n        \n        try \n        {\n            let numVal = value.contains(\".\") ? Number.parseFloat(value) : Number.parseInt(value);\n            if (!Number.isNaN(numVal))\n            {\n                config[key] = numVal;\n                continue;\n            }\n        }\n        catch (error)\n        { }\n        \n        let strVal = value;\n        config[key] = strVal;\n    }    \n}    \n\n\nexport class ConfigurationManager\n{\n    private constructor() { }\n    \n    \n    public static getConfig<T>(key: string): T\n    {\n        let value = config[key];\n        if (value === undefined || value == null)\n            return null;\n        return value as T;\n    }\n}\n"]}