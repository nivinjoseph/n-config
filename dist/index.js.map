{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import \"@nivinjoseph/n-ext\";\nimport { given } from \"@nivinjoseph/n-defensive\";\n\n\nlet config: { [index: string]: any } = {};\n\nif (typeof window !== \"undefined\" && typeof document !== \"undefined\")\n{\n    config = Object.assign(config, (<any>window).config);\n}    \nelse\n{    \n    let fs: any;\n    let path: any;\n    \n    eval(`fs = require(\"fs\");`);\n    eval(`path = require(\"path\");`);\n    \n    \n    const parsePackageDotJson = () =>\n    {\n        const packageDotJsonPath = path.resolve(process.cwd(), \"package.json\");\n        const obj: any = {};\n        if (!fs.existsSync(packageDotJsonPath))\n            return obj;\n\n        const json: string = fs.readFileSync(packageDotJsonPath, \"utf8\");\n        if (json != null && !json.toString().isEmptyOrWhiteSpace())\n        {\n            const parsed = JSON.parse(json.toString());\n            obj.appInfo = {\n                name: parsed.getValue(\"name\"),\n                description: parsed.getValue(\"description\"),\n                version: parsed.getValue(\"version\")\n            };\n        }\n\n        return obj;\n    };\n    \n    const parseConfigDotJson = () =>\n    {\n        const configDotJsonPath = path.resolve(process.cwd(), \"config.json\");\n        let obj: any = {};\n        if (!fs.existsSync(configDotJsonPath))\n            return obj;    \n        \n        const json: string = fs.readFileSync(configDotJsonPath, \"utf8\");\n        if (json != null && !json.toString().isEmptyOrWhiteSpace())\n            obj = JSON.parse(json.toString());\n        \n        return obj;\n    };\n    \n    /* BORROWED FROM https://github.com/motdotla/dotenv/blob/master/lib/main.js\n    * Parses a string or buffer into an object\n    * @param {(string|Buffer)} src - source to be parsed\n    * @returns {Object} keys and values from src\n    */\n    const parseDotEnv = () =>\n    {\n        const dotEnvPath: string = path.resolve(process.cwd(), \".env\");\n        const obj: any = {};\n        if (!fs.existsSync(dotEnvPath))\n            return obj;\n\n        const src: string = fs.readFileSync(dotEnvPath, \"utf8\");\n        src.toString().split(\"\\n\").forEach((line) =>\n        {\n            // matching \"KEY' and 'VAL' in 'KEY=VAL'\n            const keyValueArr = line.match(/^\\s*([\\w\\.\\-]+)\\s*=\\s*(.*)?\\s*$/);\n            // matched?\n            if (keyValueArr != null)\n            {\n                const key = keyValueArr[1];\n\n                // default undefined or missing values to empty string\n                let value = keyValueArr[2] || \"\";\n\n                // expand newlines in quoted values\n                const len = value ? value.length : 0;\n                if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"')\n                {\n                    value = value.replace(/\\\\n/gm, \"\\n\");\n                }\n\n                // remove any surrounding quotes and extra spaces\n                value = value.replace(/(^['\"]|['\"]$)/g, \"\").trim();\n\n                obj[key] = value;\n            }\n        });\n\n        return obj;\n    };\n    \n    const parseProcessDotEnv = () =>\n    {\n        return process.env || {};\n    };\n    \n    const parseCommandLineArgs = () =>\n    {\n        const obj: any = {};\n        const args = process.argv;\n        if (args.length <= 2)\n            return obj;    \n        \n        for (let i = 2; i < args.length; i++)\n        {\n            const arg = args[i].trim();\n\n            if (!arg.contains(\"=\"))\n                continue;\n\n            const parts = arg.split(\"=\");\n            if (parts.length !== 2)\n                continue;\n\n            const key = parts[0].trim();\n            const value = parts[1].trim();\n\n            if (key.isEmptyOrWhiteSpace() || value.isEmptyOrWhiteSpace())\n                continue;\n\n            const boolVal = value.toLowerCase();\n            if (boolVal === \"true\" || boolVal === \"false\")\n            {\n                obj[key] = boolVal === \"true\";\n                continue;\n            }\n\n            try \n            {\n                const numVal = value.contains(\".\") ? Number.parseFloat(value) : Number.parseInt(value);\n                if (!Number.isNaN(numVal))\n                {\n                    obj[key] = numVal;\n                    continue;\n                }\n            }\n            catch (error)\n            { }\n\n            const strVal = value;\n            obj[key] = strVal;\n        }\n        \n        return obj;\n    };\n    \n    \n    config = Object.assign(config, parsePackageDotJson(), parseConfigDotJson(), parseDotEnv(),\n        parseProcessDotEnv(), parseCommandLineArgs());\n}\n\n\nexport abstract class ConfigurationManager\n{\n    private constructor() { }\n    \n    \n    public static getConfig<T>(key: string): T\n    {\n        given(key, \"key\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        return config.getValue(key);\n    }\n}\n"]}