{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import \"n-ext\";\nimport { given } from \"n-defensive\";\n\n// declare const fs: any;\n// declare const path: any;\n\nlet config: { [index: string]: any } = {};\n\nif (typeof window !== \"undefined\" && typeof document !== \"undefined\")\n{\n    config = Object.assign(config, (<any>window).config);\n}    \nelse\n{\n    // import * as fs from \"fs\";\n    // import * as path from \"path\";\n    \n    let fs: any;\n    let path: any;\n    \n    eval(`fs = require(\"fs\");`);\n    eval(`path = require(\"path\");`);\n    \n    \n    const filePath = path.join(process.cwd(), \"config.json\");\n\n    if (fs.existsSync(filePath))\n    {\n        const json = fs.readFileSync(filePath, \"utf8\");\n        if (json != null && !json.isEmptyOrWhiteSpace())\n            config = JSON.parse(json);\n    }\n\n    let args = process.argv;\n    if (args.length > 2)\n    {\n        for (let i = 2; i < args.length; i++)\n        {\n            let arg = args[i].trim();\n\n            if (!arg.contains(\"=\"))\n                continue;\n\n            let parts = arg.split(\"=\");\n            if (parts.length !== 2)\n                continue;\n\n            let key = parts[0].trim();\n            let value = parts[1].trim();\n\n            if (key.isEmptyOrWhiteSpace() || value.isEmptyOrWhiteSpace())\n                continue;\n\n            let boolVal = value.toLowerCase();\n            if (boolVal === \"true\" || boolVal === \"false\")\n            {\n                config[key] = boolVal === \"true\";\n                continue;\n            }\n\n            try \n            {\n                let numVal = value.contains(\".\") ? Number.parseFloat(value) : Number.parseInt(value);\n                if (!Number.isNaN(numVal))\n                {\n                    config[key] = numVal;\n                    continue;\n                }\n            }\n            catch (error)\n            { }\n\n            let strVal = value;\n            config[key] = strVal;\n        }\n    }\n}\n\n\nexport abstract class ConfigurationManager\n{\n    private constructor() { }\n    \n    \n    public static getConfig<T>(key: string): T\n    {\n        given(key, \"key\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        return config.getValue(key);\n        \n        // let value = config[key];\n        // if (value === undefined || value == null)\n        //     return null;\n        // return value as T;\n    }\n}\n"]}